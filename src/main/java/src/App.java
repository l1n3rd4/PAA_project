/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package src;

import java.io.*;
import java.util.Scanner;

public class App {
    static String ArchiveBin = "People.bin";
    static String IndexBin = "IndexFile.bin";
    static String HashIndexBin = "HashIndexBin.bin";
    static final long HASH_SIZE = 43;
//            661321;

    public static void main(String[] args) {
        try{
            int option = 2;
            Scanner keyboard = new Scanner(System.in);
            Pessoa pessoaSearch;

            while(option != 0){

                System.out.println("Escolha uma das opções abaixo: ");
                System.out.println("0 - Sair");
                System.out.println("1 - Pesquisa sequncial no Arquivo de Índice");
                System.out.println("2 - Mudar arquivo texto para binário");
                System.out.println("3 - Ler Indice Hash file");
                System.out.println("4 - Pesquisa utilizando função hash");
                option = keyboard.nextInt();

                switch (option){
                    case 0:
                        break;
                    case 1:
                        System.out.println("Digite o numero do RG procurado: ");
                        pessoaSearch = Search(keyboard.nextLong());
                        System.out.println(pessoaSearch.toString());
                        break;
                    case 2:
                        BinaryFileParser(args[0]);
                        fillHash();
                        break;
                    case 3:
                        readHash();
                        break;
                    case 4:
                        System.out.println("Digite o numero do RG procurado: ");
                        pessoaSearch = SearchHash(keyboard.nextLong());
                        System.out.println(pessoaSearch.toString());
                    default:
                        System.out.println("O número digitado foi inválido!");
                }
            }

            keyboard.close();
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }
    }

    public static void BinaryFileParser(String TextFile) throws IOException{

        generateHashFile();
        String line;
        String[] data;
        long pointer;
        int counter = 0;

        try {
            File InputFile = new File(TextFile);
            Scanner FileReader = new Scanner(InputFile);
            RandomAccessFile OutputFileBin = new RandomAccessFile(ArchiveBin, "rw");
            RandomAccessFile IndexFile = new RandomAccessFile(IndexBin, "rw");

            OutputFileBin.setLength(0);
            IndexFile.setLength(0);
            IndexFile.writeInt(0);

            while (FileReader.hasNextLine()){
                line = FileReader.nextLine();
                data = line.split(";");
                Pessoa pessoaBIN = new Pessoa(Long.parseLong(data[0]), data[1], data[2]);
                pointer = OutputFileBin.getFilePointer();

                pessoaBIN.saveToFile(OutputFileBin);
                pessoaBIN.saveToFileIndex(IndexFile, pointer);
                counter++;
            }

            IndexFile.seek(0);
            IndexFile.writeInt(counter);

            OutputFileBin.close();
            IndexFile.close();
            FileReader.close();

            fillHash();
        } catch (FileNotFoundException e){
            System.out.println("ERROR: " + e.getMessage());
        }
    }

    public static Pessoa Search(long key){
        Pessoa person = null;

        try{
            RandomAccessFile file = new RandomAccessFile(ArchiveBin, "rw");
            RandomAccessFile fileIndex = new RandomAccessFile(IndexBin, "rw");

            int numberPeopleRegistered = fileIndex.readInt();
            Index[] indexPeople = new Index[numberPeopleRegistered];

            long RgIndex;
            long pointerIndex;
            long Rg;
            String Name;
            String BirthDay;

            for(int i = 0; i < numberPeopleRegistered; i++){
                RgIndex = fileIndex.readLong();

                pointerIndex = fileIndex.readLong();
                indexPeople[i] = new Index(RgIndex, pointerIndex);
            }

            for(int i = 0; i < numberPeopleRegistered; i++){
                if(indexPeople[i].getRg() == key){
                    file.seek(indexPeople[i].getPointer());
                    Rg = file.readLong();
                    Name = file.readUTF();
                    BirthDay = file.readUTF();
                    person = new Pessoa(Rg, Name, BirthDay);
                    break;
                }
            }

            file.close();
            fileIndex.close();
        } catch (IOException e){
            System.out.println("ERROR: " + e.getMessage());
        }
        return person;
    }

    public static void generateHashFile(){
        try {
            RandomAccessFile IndexFile = new RandomAccessFile(HashIndexBin, "rw");
            Index index;

            for (int i = 0; i < HASH_SIZE; i++) {
                index = new Index(0 , 0);
                IndexFile.writeLong(index.getRg());
                IndexFile.writeLong(index.getPointer());
            }

            IndexFile.close();
        } catch(IOException e){
            System.out.println("ERROR: " + e.getMessage());
        }
    }

    public static int fillHash(){

        try{
            RandomAccessFile Hashfile = new RandomAccessFile(HashIndexBin, "rw");
            RandomAccessFile fileIndex = new RandomAccessFile(IndexBin, "rw");
            long RgIndex;
            long pointerIndex;

            Index[] index = new Index[(int) HASH_SIZE];
            long buffer;
            int numberPeople = fileIndex.readInt();
            Index[] index2 = new Index[numberPeople];

            for (int i = 0; i < HASH_SIZE; i++){
                RgIndex = Hashfile.readLong();
                pointerIndex = Hashfile.readLong();

                index[i] = new Index(RgIndex, pointerIndex);
            }

            for(int i = 0; i < numberPeople; i++){
                RgIndex = fileIndex.readLong();
                pointerIndex = fileIndex.readLong();
                index2[i] = new Index(RgIndex, pointerIndex);
            }

            for(int i = 0; i < numberPeople; i++){
                buffer = hash(index2[i].getRg());

                if(index[(int) buffer].getRg() == 0){
                    index[(int) buffer].setRg(index2[i].getRg());
                    index[(int) buffer].setPointer(index2[i].getPointer());
                } else {

                    int counter = 0;

                    while(index[(int) buffer].getRg() != 0){
                        buffer = ((buffer + 1) % HASH_SIZE);
                        counter++;
                    }

                    if(counter == HASH_SIZE){
                        System.out.println("Não há espaços sobrando na HASH table!");
                        return -1;
                    }

                    index[(int) buffer].setRg(index2[i].getRg());
                    index[(int) buffer].setPointer(index2[i].getPointer());

                }
            }


            for(int i = 0; i < HASH_SIZE; i++){
                System.out.println("RG: " + index[i].getRg());
                System.out.println("Pointer " + index[i].getPointer());
                Hashfile.writeLong(index[i].getRg());
                Hashfile.writeLong(index[i].getPointer());
            }

            Hashfile.close();
            fileIndex.close();
        } catch(IOException e){
            System.out.println("ERROR: " + e.getMessage());
        }

        return (0);
    }

    public static long hash(long number){
        return ((number + 1) % HASH_SIZE);
    }

    public static void readHash(){
        try {
            RandomAccessFile IndexFile = new RandomAccessFile(HashIndexBin, "r");
            long rg = IndexFile.readLong();
            long pointer = IndexFile.readInt();
            for (int i = 0; i < HASH_SIZE; i++) {
                System.out.println("RG: " + rg);
                System.out.println("Pointer: " + pointer);
            }

            IndexFile.close();
        } catch(IOException e){
            System.out.println("ERROR: " + e.getMessage());
        }
    }

    public static Pessoa SearchHash(long key){
        try {
            long buffer = hash(key);
            RandomAccessFile Hashfile = new RandomAccessFile(HashIndexBin, "rw");
            RandomAccessFile filePeople = new RandomAccessFile(ArchiveBin , "rw");

            long Rg;
            String Name;
            String BirthDay;
            long pointer;
            Pessoa person = null;
            Hashfile.seek(buffer);

            Rg = Hashfile.readLong();
            pointer = Hashfile.readLong();

            if(Rg == key){
                filePeople.seek(pointer);

                Rg = filePeople.readLong();
                Name = filePeople.readUTF();
                BirthDay = filePeople.readUTF();
                person = new Pessoa(Rg, Name, BirthDay);
            } else {
                while(Rg != key){
                    Rg = Hashfile.readLong();
                    pointer = Hashfile.readLong();
                }

                filePeople.seek(pointer);
                Rg = filePeople.readLong();
                Name = filePeople.readUTF();
                BirthDay = filePeople.readUTF();
                person = new Pessoa(Rg, Name, BirthDay);
            }



            Hashfile.close();
            filePeople.close();
            return person;
        } catch (IOException e){
            System.out.println("ERROR: " + e.getMessage());
        }
        return null;
    }
}